@	Reach Mux
@	+Roll system v2
@	Coded by: Gizmo AKA Ourea, Alzie
@	Coded for: The Reach Mux
@	Email: ccubed.techno@gmail.com
@	Date Last Touched: 1/12/2014
@----------------------------------------------------------------------------
@	Purpose: Recode the existing +roll system on the reach in a more
@	understandable way so that it may be more easily modified later
@----------------------------------------------------------------------------
@	Organization
@	F.* - Function - Player does not interact
@	CMD.* - Command - Player does interact
@	LIT.* - Literal - Player sees but does not interact
@	PARSE.* - Parser - Player does not interact
@	DISPLAY.* - Display Formatter - Player sees but does not interact
@----------------------------------------------------------------------------

@	CMD.ROLL
@	Usage: +roll list of stats=people or/and here
@	Returns: Pemits the resulting roll to the room, noted people or sends to a function for mitigating multiple people and the room
@
@	Registers Used: None
&CMD.ROLL #18850=$roll *:@assert [isapproved(%#)]=[pemit(%#,[ansi(hr,ERROR)]:%bOnly approved characters can roll.)];@switch [t(after(%0,=))]=0,[u(PARSE.GETDICE,%0)][u(DISPLAY.OUTPUT.SIMPLE,1,0)],1,[u(PARSE.GETDICE,[before(%0,=)])][u(DISPLAY.OUTPUT.SIMPLE,[if(strmatch(%0,*here*),1,0)],[u(PARSE.TARGET.PEMIT,[after(%0,=)])])]

@	DISPLAY.OUTPUT.SIMPLE
@	Usage: Outputs a roll with no flags
@	%0 - Number of Dice to Roll
@	%1 - 1 for REMIT here or 0 for no remit
@	%2 - 0 or a list of DBREFs for pemit
&DISPLAY.OUTPUT.SIMPLE #18850=[u(F.ROLL,%q0,10)][setq(T,[u(LIT.HEADER)]%R[space(4)]Rolled [if(gt(%q0,0),%qS [if(gt(%qS,1),Successes,Success)] [if(%qE,for an exceptional success.)],a chance die for [switch(%qS,0,a failure,1,a success,-1,a dramatic failure,successes)])]%R[space(4)]< [iter(trim(%qU),[if(or(and(gt(%q0,0),gte(%i0,8)),and(eq(%i0,10),eq(%q0,0))),[ansi(hw,%i0)],[ansi(hx,%i0)])], ,%b)] >%R[u(LIT.FOOTER,[trim(%q9,l,+)])])][if(%0,[remit(where(%#),%qT)])][if(t(%1),[pemit(%2,%qT)])]

@	F.ROLL
@	Usage: Rolls Dice
@	%0 - Number of Dice to roll
@	%1 - Reroll Number (8 for 8-again, 9 for 9-again, 10 for regular, 11 for no rerolls)
@	%2 - Rote (1 for rote, 0 or absent otherwise)
@	%3 - Weak (Subtract 1s)
@	%4 - TN (If extended, Target Number)
@	%5 - RN (If extended, Maximum number of rolls) (0 or absent for unlimited)
@	%6 - 1 for Literal, 0 for Sorted
@
@	Registers Used
@	U - Hold uncolored string of roll results
@	S - # of Sux
@	Z - Number of Rerolls
@	E - Number of Exceptional Sux rolls
@	G - Tracks Sux needed for Exceptional
@	R - Tracks Number of Rolls (only used for extended)
@	F - Failures
&F.ROLL #18850=[setq(S,0)][setq(E,0)][setq(R,0)][setq(G,0)][setq(Z,0)][setq(F,0)][if(gt(%0,0),[iter(lrand(1,10,%0),[if(gte(%i0,8),[setq(S,inc(%qS))][setq(G,inc(%qG))],[setq(F,inc(%qF))])][if(gte(%i0,%1),[setq(Z,inc(%qZ))])][if(and(eq(%i0,1),t(%3)),[setq(S,dec(%qS))])][setq(U,%qU %i0)], ,@@)][if(and(%2,gt(%qF,0)),[u(F.ROLL.ROTE,%qF)])][if(and(not(%3),gt(%qZ,0)),[u(F.ROLL.EXTRAS,%qZ,%1,%2,%3,%4,%5,%6)])][if(gte(%qG,5),[setq(E,inc(%qE))])][setq(R,inc(%qR))][switch([t(%4)][t(%5)],10,[if(lt(%qS,%4),[u(F.ROLL.EXTRAS,%0,%1,%2,%3,%4,%5,%6)])],11,[if(and(lt(%qS,%4),lt(%qR,%6)),[u(F.ROLL.EXTRAS,%0,%1,%2,%3,%4,%5,%6)])],01,[if(lt(%qR,%5),[u(F.ROLL.EXTRAS,%0,%1,%2,%3,%4,%5,%6)])])],[u(F.CHANCE.DIE)])][if(not(%6),[setq(U,sort(%qU))])]

@	F.ROLL.ROTE
@	Usage: Rolls and tallies sux, no specials
@	%0 - number of dice
&F.ROLL.ROTE #18850=[iter(lrand(1,10,%0),[if(gte(%i0,8),[setq(S,inc(%qS))])][setq(U,%qU %i0)], ,@@)]

@	F.ROLL.EXTRAS
@	Usage: Rolls rolls after the first so cleanup code doesn't get run every time.
@	Accepts same arguments as main F.ROLL but only checks for things that matter per roll
&F.ROLL.EXTRAS #18850=[setq(G,0)][setq(Z,0)][setq(F,0)][iter(lrand(1,10,%0),[if(gte(%i0,8),[setq(S,inc(%qS))][setq(G,inc(%qG))],[setq(F,inc(%qF))])][if(gte(%i0,%1),[setq(Z,inc(%qZ))])][if(and(eq(%i0,1),t(%3)),[setq(S,dec(%qS))])][setq(U,%qU %i0)], ,@@)][if(and(%2,gt(%qF,0)),[u(F.ROLL.ROTE,%qF)])][if(and(not(%3),gt(%qZ,0)),[u(F.ROLL.EXTRAS,%qZ,%1,%2,%3,%4,%5,%6)])][if(gte(%qG,5),[setq(E,inc(%qE))])][setq(R,inc(%qR))][switch([t(%4)][t(%5)],10,[if(lt(%qS,%4),[u(F.ROLL.EXTRAS,%0,%1,%2,%3,%4,%5,%6)])],11,[if(and(lt(%qS,%4),lt(%qR,%6)),[u(F.ROLL.EXTRAS,%0,%1,%2,%3,%4,%5,%6)])],01,[if(lt(%qR,%5),[u(F.ROLL.EXTRAS,%0,%1,%2,%3,%4,%5,%6)])])]

@	F.CHANCE.DIE
@	Usage: Rolls a chance die and outputs results
@
@	Passed: Nothing
@
@	Registers Used:
@	C - Color String
@	U - Uncolored String
@	S - Sux
@	Z - Rerolls
&F.CHANCE.DIE #18850=[switch([setr(4,[lrand(1,10,1)])],1,[setq(S,-1)][setq(U,%qU 1)],10,[setq(S,inc(%qS))][setq(U,%qU 10)][u(F.CHANCE.DIE)],[setq(U,%qU %q4)])]

@	PARSE.GETDICE
@	Usage: Parses a pool and returns a number of dice
@	%0 - Stats to roll - str+dex-1
@	Returns: Number of Dice to Roll, Sets A register for parsed pool string
@
@	Registers Used: 
@		%q0 - Number of Dice to roll
@		%q9 - Parsed text of the stats (turns str+dex into Strength+Dexterity)
@		%q2 - Holds the original input spaced out for parsing
@		%q5 - Temp Var. Holds Stat/# pair.
&PARSE.GETDICE #18850=[setq(0,0)][setq(9,[space(0)])][setq(2,[edit(%0,-,%b-,+,%b+)])][iter(%q2,[switch([u(F.POSNEG,%i0)],1,[if(after(%i0,+),[if(isnum(after(%i0,+)),[setq(0,[add(%q0,[after(%i0,+)])])][setq(9,%q9+ [after(%i0,+)]%b)],[setq(0,[add(%q0,[after([setr(5,[u(PARSE.STAT,after(%i0,+),0)])],/)])])][setq(9,%q9+ [before(%q5,/)]%b)])],[if(isnum(%i0),[setq(0,add(%q0,%i0))][setq(9,%q9+ %i0%b)],[setq(0,[add(%q0,[after([setr(5,[u(PARSE.STAT,%i0,0)])],/)])])][setq(9,%q9+ [before(%q5,/)]%b)])])],0,[if(isnum(after(%i0,-)),[setq(0,sub(%q0,after(%i0,-)))][setq(9,%q9- [after(%i0,-)]%b)],[setq(0,[sub(%q0,[after([setr(5,[u(PARSE.STAT,after(%i0,-),0)])],/)])][setq(9,%q9- [before(%q5,/)]%b)])])])], ,@@)]

@	F.POSNEG
@	Usage: Takes an input and returns whether that is positive or negative
@	Returns: 
@		0 - Negative (If first char in word is -)
@		1 - Positive (If first char in word is +) (Anything else is assumed positive)
&F.POSNEG #18850=[switch([strmatch(mid(%0,0,1),-)][strmatch(mid(%0,0,1),+)],01,1,10,0,1)]

@	PARSE.STAT
@	Usage: Determines whether or not a given stat is a specialty and returns the number of dice to roll
@	%0 - stat to check
@	%1 - /perm
@	Returns: The stat pair. IE: stat name/value
&PARSE.STAT #18850=[switch(words(%0,.),1,[setr(5,[u(F.GET.ROLL.DICE,%#,%0,%1)])],2,[setr(5,[u(F.GET.ROLL.DICE,%#,before(%0,.),%1,after(%0,.))])])]

@	F.GET.ROLL.DICE
@	Usage: Returns a stat pair. IE: stat name/value
@
@	Arguments Passed:
@		%0 - DBREF of player
@		%1 - The Stat 
@		%2 - Permanent Stats (For /perm flag) (0 for no, 1 for yes)
@		%3 - The specialty if applicable (Optional)
@
@	No code here. Included for note purposes.

@	LIT.HEADER
@	Header Literal for Roll. Change this to change the roll header
&LIT.HEADER #18850=[ansi(nr,====)][ljust([ansi(hx,> [ansi(hw,[name(%#)])] <)],74,[ansi(nr,=)])]

@	LIT.FOOTER
@	Footer Literal for Roll. Change this to change the roll footer
&LIT.FOOTER #18850=[rjust([ansi(hx,> [ansi(hw,%0)] <)],74,[ansi(nr,=)])][ansi(nr,====)]